@page "/teacher"
@using School.Management.Genders
@using School.Management.Teachers
@using School.Management.Localization
@using Volo.Abp.AspNetCore.Components.Web
@inherits ManagementComponentBase
@inject ITeacherAppService TeacherAppService
@inject AbpBlazorMessageLocalizerHelper<ManagementResource> LH

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Teachers"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                @if (CanCreateTeacher)
                {
                    <Button Color="Color.Primary"
                            Clicked="OpenCreateTeacherModal">
                        @L["NewTeacher"]
                    </Button>
                }
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="TeacherDto"  Data="TeacherList" ReadData="OnDataGridReadAsync" TotalItems="TotalCount" ShowPager="true" PageSize="PageSize">
            <DataGridColumns>
                <DataGridColumn Width="150px" TItem="TeacherDto"   Field="@nameof(TeacherDto.Id)" Sortable="false" Caption="@L["Actions"]">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                                @L["Actions"]
                            </DropdownToggle>
                            <DropdownMenu>
                                @if (CanEditTeacher)
                                {
                                    <DropdownItem Clicked="() => OpenEditTeacherModal(context)">
                                        @L["Edit"]
                                    </DropdownItem>
                                }
                                @if (CanDeleteTeacher)
                                {
                                    <DropdownItem Clicked="() => DeleteTeacherAsync(context)">
                                        @L["Delete"]
                                    </DropdownItem>
                                }
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="TeacherDto" Field="@nameof(TeacherDto.Name)" Caption="@L["Name"]"></DataGridColumn>
                <DataGridColumn TItem="TeacherDto" Field="@nameof(TeacherDto.Sex)" Caption="@L["Sex"]"> </DataGridColumn>
                <DataGridColumn TItem="TeacherDto" Field="@nameof(TeacherDto.Age)" Caption="@L["Age"]"> </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>
<Modal @ref="CreateTeacherModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewTeacher"]</ModalTitle>
                <CloseButton Clicked="CloseCreateTeacherModal" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewTeacher" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@NewTeacher.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Gender"]</FieldLabel>
                            <Select TValue="Gender" @bind-SelectedValue="@NewTeacher.Sex">
                                @foreach (int genderValue in Enum.GetValues(typeof(Gender)))
                                {
                                    <SelectItem TValue="Gender" Value="@((Gender) genderValue)">
                                        @L[$"Enum:Gender.{genderValue}"]
                                    </SelectItem>
                                }
                            </Select>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Age"]</FieldLabel>
                            <NumericEdit TValue="int" @bind-Value="NewTeacher.Age" />
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateTeacherModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateTeacherAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
 <Modal @ref="EditTeacherModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                        <ModalTitle>@EditingTeacher.Name</ModalTitle>
                        <CloseButton Clicked="CloseEditTeacherModal" />
                    </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@EditingTeacher" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingTeacher.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Gender"]</FieldLabel>
                            <Select TValue="Gender" @bind-SelectedValue="@EditingTeacher.Sex">
                                @foreach (int genderValue in Enum.GetValues(typeof(Gender)))
                                {
                                    <SelectItem TValue="Gender" Value="@((Gender) genderValue)">
                                        @L[$"Enum:Gender.{genderValue}"]
                                    </SelectItem>
                                }
                            </Select>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Age"]</FieldLabel>
                            <NumericEdit TValue="int" @bind-Value="EditingTeacher.Age" />
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditTeacherModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateTeacherAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>