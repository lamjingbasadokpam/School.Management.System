@page "/subject"
@attribute [Authorize(ManagementPermissions.Subjects.Default)]
@using School.Management.Permissions
@using Volo.Abp.Application.Dtos
@using School.Management.Subjects
@using School.Management.Localization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<ManagementResource> L
@inject AbpBlazorMessageLocalizerHelper<ManagementResource> LH

@inherits AbpCrudPageBase<ISubjectAppService, SubjectDto, Guid, PagedAndSortedResultRequestDto, CreateUpdateSubjectDto>

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Subjects"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                @if (HasCreatePermission)
                {
                    <Button Color="Color.Primary"
                            Clicked="OpenCreateModalAsync">
                        @L["NewSubject"]
                    </Button>
                }
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="SubjectDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="SubjectDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="SubjectDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="SubjectDto"
                                          Text="@L["Edit"]"
                                          Visible=HasUpdatePermission
                                          Clicked="() => OpenEditModalAsync(context)" />
                            <EntityAction TItem="SubjectDto"
                                          Text="@L["Delete"]"
                                          Visible=HasDeletePermission
                                          Clicked="() => DeleteEntityAsync(context)"
                                          ConfirmationMessage="()=>GetDeleteConfirmationMessage(context)" />
                        </EntityActions>

                    </DisplayTemplate>
                </DataGridEntityActionsColumn>

                <DataGridColumn TItem="SubjectDto" Field="@nameof(SubjectDto.Name)" Caption="@L["Name"]"></DataGridColumn>
                <DataGridColumn TItem="SubjectDto" Field="@nameof(SubjectDto.TeacherName)" Caption="@L["Teacher"]"></DataGridColumn>
                <DataGridColumn TItem="SubjectDto" Field="@nameof(SubjectDto.Class)" Caption="@L["Class"]"> </DataGridColumn>
                <DataGridColumn TItem="SubjectDto" Field="@nameof(SubjectDto.Languages)" Caption="@L["Languages"]">
                </DataGridColumn>
                <DataGridColumn TItem="SubjectDto"    Field="@nameof(SubjectDto.CreationTime)" Caption="@L["CreationTime"]">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>
<Modal @ref="@CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewSubject"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Field>
                        <FieldLabel>@L["Teacher"]</FieldLabel>
                        <Select TValue="Guid" @bind-SelectedValue="@NewEntity.TeacherId">
                            @foreach (var teacher in teahcerList)
                            {
                                <SelectItem TValue="Guid" Value="@teacher.Id">
                                    @teacher.Name
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Class"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Class">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Languages"]</FieldLabel>
                            <Select TValue="Language" @bind-SelectedValue="@NewEntity.Languages">
                                @foreach (int languageValue in Enum.GetValues(typeof(Language)))
                                {
                                    <SelectItem TValue="Language" Value="@((Language) languageValue)">
                                        @L[$"Enum:Language.{languageValue}"]
                                    </SelectItem>
                                }
                            </Select>
                        </Field>
                    </Validation>
                   
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
<Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.Name</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Field>
                        <FieldLabel>@L["Teacher"]</FieldLabel>
                        <Select TValue="Guid" @bind-SelectedValue="@EditingEntity.TeacherId">
                            @foreach (var teacher in teahcerList)
                            {
                                <SelectItem TValue="Guid" Value="@teacher.Id">
                                    @teacher.Name
                                </SelectItem>
                            }
                        </Select>
                    </Field>

                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Class"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Class">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Languages"]</FieldLabel>
                            <Select TValue="Language" @bind-SelectedValue="@EditingEntity.Languages">
                                @foreach (int languageValue in Enum.GetValues(typeof(Language)))
                                {
                                    <SelectItem TValue="Language" Value="@((Language) languageValue)">
                                        @L[$"Enum:Language.{languageValue}"]
                                    </SelectItem>
                                }
                            </Select>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
